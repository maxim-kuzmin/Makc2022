Программа состоит из нескольких приложений, каждое из которых упаковано в свой docker-контейнер.

Данные хранятся в базах данных MS SQL Server и Redis, упакованных в собственные docker-контейнеры.

Асинхронный обмен данными между приложениями осуществляется с помощью упакованного в docker-контейнер брокера сообщений RabbitMQ.

В продуктовой среде предлагается использовать возможности облачной платформы Microsoft Azure для замены контейнерных версий MS SQL Server и Redis. Вместо RabbitMQ предлагается использовать Azure Service Bus.

Запуск программы осуществляется с помощью docker compose.

Работа с данными и вся бизнес-логика сосредоточена в микросервисах - серверных веб-приложениях, открывающих клиентам конечные точки API по стандартам REST и gRPC:

- Basket.API - корзина товаров, база данных: Redis

- Catalog.API - каталог товаров, база данных: MS SQL Server

- Identity.API - аутентификация и авторизация пользователей по протоколу OAuth 2.0 (IdentityServer4: https://github.com/IdentityServer/IdentityServer4), база данных: MS SQL Server

- Ordering.API - заказ товаров, база данных: MS SQL Server

- Payment.API - оплата товаров

Микросервисы не взаимодействуют друг с другом. Все необходимые для их работы данные они хранят в своих собственных базах. Для извещения других микросервисов об изменении своих данных используется брокер сообщений RabbitMQ.

Для агрегирующей бизнес-логики, которая собирает и обрабатывает данные сразу из нескольких микросервисов, предназначены BFF (Backend-for-Frontend: https://learn.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends) - серверные веб-приложения, открывающие клиентам конечные точки API по стандарту REST:

- Mobile.Shopping.HttpAggregator - покупка товаров через мобильное приложение

- Web.Shopping.HttpAggregator - покупка товаров через веб-приложение

REST-запросы к микросервисам приходят:

- либо из браузера от одностраничного клиентского Angular веб-приложения WebSPA на порту 5104,

- либо из серверной части клиент-серверного ASP.NET MVC веб-приложения WebMVC на порту 5100,

- либо из мобильного приложения.

Все REST-запросы к микросервисам идут через прокси-сервер (Envoy: https://www.envoyproxy.io/), запущенный в двух контейнерах:

- один для запросов из браузера к порту "5202" или из серверной части клиент-серверного веб-приложения непосредственно по имени сервиса прокси-сервера, заданного в файле docker-compose.yaml, с конфигурацией в файле "src\ApiGateways\Envoy\config\webshopping\envoy.yaml",

- другой для запросов из мобильного приложения к порту "5200" с конфигурацией в файле "src\ApiGateways\Envoy\config\mobileshopping\envoy.yaml".

gRPC-запросы к микросервисам приходят из BEF. gRPC является более быстрой альтернативой REST, поэтому для обмена данными между серверными приложениями предпочтительнее использовать gRPC-запросы. Там, где использование gRPC невозможно (например, в клиентском одностраничном веб-приложении, отправляющем запросы из браузера), используется REST.